@using EF = System.Data.Entity;
@using Consumer.Migrations;
@using Consumer.Models;

@{
    // Manually run the database initializer to ensure that the Users table
    // exists before WebSecurity.InitializeDatabaseConnection is run.
    var initializer = new EF.MigrateDatabaseToLatestVersion<ConsumerContext, Configuration>();
    EF.Database.SetInitializer(initializer);
    var db = new ConsumerContext();
    initializer.InitializeDatabase(db);
    
    WebSecurity.InitializeDatabaseConnection("DefaultConnection", "Users", "UserId", "UserName", autoCreateTables: true);

    var membership = (SimpleMembershipProvider)Membership.Provider;
    var roles = (SimpleRoleProvider)Roles.Provider;

    // A couple of default accounts
    if (membership.GetUser("Teacher", false) == null)
    {
        membership.CreateUserAndAccount("Teacher", "password");
        var id = membership.GetUserId("Teacher");
        var user = db.Users.Find(id);
        user.FirstName = "Stuart";
        user.LastName = "Johnson";
        user.Email = "sjohnson@consumer.azurewebsites.net";
        user.SendEmail = true;
        user.SendName = true;
        // If the user did not exist when Seed ran, then the
        // instructor was not properly assigned
        var course = db.Courses.Find(1);
        course.Instructor = user;
        db.SaveChanges();
    }
    if (membership.GetUser("Student", false) == null)
    {
        membership.CreateUserAndAccount("Student", "password");
        var id = membership.GetUserId("Student");
        var user = db.Users.Find(id);
        user.FirstName = "Sam";
        user.LastName = "Pierce";
        user.Email = "spierce@consumer.azurewebsites.net";
        user.SendEmail = true;
        user.SendName = true;
        var course = db.Courses.Find(1);
        course.EnrolledUsers.Add(user);
        db.SaveChanges();
    }

    // Create all the roles needed
    if (!Roles.RoleExists(UserRoles.TeacherRole))
    {
        Roles.CreateRole(UserRoles.TeacherRole);
    }
    if (!Roles.RoleExists(UserRoles.StudentRole))
    {
        Roles.CreateRole(UserRoles.StudentRole);
    }

    // Attach the roles to the default users
    if (!roles.GetRolesForUser("Teacher").Contains(UserRoles.TeacherRole))
    {
        roles.AddUsersToRoles(new[] { "Teacher" }, new[] { UserRoles.TeacherRole });
    }
    if (!roles.GetRolesForUser("Student").Contains(UserRoles.StudentRole))
    {
        roles.AddUsersToRoles(new[] { "Student" }, new[] { UserRoles.StudentRole });
    }
}
