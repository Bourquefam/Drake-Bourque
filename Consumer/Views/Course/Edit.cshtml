@model Consumer.Models.CreateEditCourseModel

@{
    ViewBag.Title = Model.Title;
}

<hgroup class="title">
    <h1>@ViewBag.Title.</h1>
    <h2>Edit this course.</h2>
</hgroup>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    
    @Html.HiddenFor(model => model.CourseId)

    <div id="accordian">
        <h3>Course Name</h3>
        <div>
            <fieldset>
                <legend>Course</legend>

                <ol>
                    <li>
                        @Html.LabelFor(model => model.Name)
                        @Html.EditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </li>
                </ol>
            </fieldset>
        </div>

        <h3>Location</h3>
        <div>
            <fieldset>
                <legend>Location</legend>

                <p>
                    In the LTI 1.x world, the course context is the website (tool_consumer_instance).
                    For example, if this were a K-12 LMS, this website would be specific
                    to the school district or educational service district that purchased the LMS.
                    And if this were a K-12 portal, this website would typically be specific to the
                    school.
                    However, most K-12 content and tools are licensed differently; typically to
                    subsets of schools within the district. There is also a growing trend
                    among K-12 providers to differentiate content by state and regional context.
                </p>

                <p>
                    To better align the consumer context and the provider context,
                    this site allows you to set 3 values for each course: State, District, 
                    and School.
                    If you set the State, then the course context is the state (i.e. it is assumed that
                    anyone enrolled in the course is within the purview of the State Educational
                    Association).
                    Likewise, if you select a district within the state, the context is the
                    Local Educational Association. And if you select a school within the district,
                    the context will be limited to that one school.
                </p>

                <p>
                    Setting the state, district or school will help the LTI Tool Provider display
                    the right content or tool. To make sure that providers know which state,
                    district or school you have set, this site uses the identifiers provided by
                    the <a href="http://nces.ed.gov">National Center for Educational Statistics</a>.
                    The state, district and school (if set) are made available as custom
                    substition parameters in the LTI link:
                </p>

                <table style="margin-bottom:1em">
                    <tr>
                        <td><strong>Substitution</strong></td>
                        <td><strong>Description</strong></td>
                        <td><strong>Example</strong></td>
                    </tr>
                    <tr>
                        <td>$Context.stateId</td>
                        <td>The state abbreviation</td>
                        <td>AL</td>
                    </tr>
                    <tr>
                        <td>$Context.leaSourcedId</td>
                        <td>The NCES ID for the LEA (e.g. school district)</td>
                        <td>nces.ed.gov:4101920</td>
                    </tr>
                    <tr>
                        <td>$Context.schoolSourcedId</td>
                        <td>The NCES ID for the school</td>
                        <td>nces.ed.gov:410192000554</td>
                    </tr>
                </table>
            
                <ol>
                    <li>
                        @Html.LabelFor(model => model.StateId)
                        @Html.DropDownListFor(model => model.StateId, Model.AvailableStates, string.Empty,
                            new Dictionary<string, object>{
                                { "class", "chosen" }, 
                                { "data-placeholder", "Choose a State..." }
                            }
                        )
                    </li>
                    <li>
                        @Html.LabelFor(model => model.DistrictId)
                        @Html.DropDownListFor(model => model.DistrictId, Model.AvailableDistricts, string.Empty,
                            new Dictionary<string, object>{
                                { "class", "chosen" }, 
                                { "data-placeholder", "Choose a District..." },
                                { "data-source", @Url.Action("GetDistricts", "Location") }
                            }
                        )
                    </li>
                    <li>
                        @Html.LabelFor(model => model.SchoolId)
                        @Html.DropDownListFor(model => model.SchoolId, Model.AvailableSchools, string.Empty,
                            new Dictionary<string, object>{
                                { "class", "chosen" }, 
                                { "data-placeholder", "Choose a School..." },
                                { "data-source", @Url.Action("GetSchools", "Location") }
                            }
                        )
                    </li>
               </ol>
            </fieldset>
        </div>
    </div>
    
    <div>
        <input type="submit" value="Save" />
        @Html.ActionLink("Back to Details", "Details", new { id = Model.CourseId }, new { @class = "button" })
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/chosen.jquery.js")
    <script>
        $(function () {
            // Divide the form into sections using jQuery UI Accordian
            $("#accordian").accordion({
                heightStyle: "content"
            });
            // Convert the location select elements into fancy combo boxes
            $("select.chosen").chosen({ allow_single_deselect: true });
            // Convert the location select elements into fancy combo boxes
            $("select.chosen").chosen({ allow_single_deselect: true });
            // If the State selection changes, then clear the district and school,
            // and then reload district (if state is not empty)
            var stateId = $("#StateId");
            var districtId = $("#DistrictId");
            var schoolId = $("#SchoolId");
            stateId.change(function () {
                districtId.val("").html("<option />").trigger("liszt:updated").trigger("change");
            });
            districtId.change(function () {
                schoolId.val("").html("<option />").trigger("liszt:updated").trigger("change");
                if (stateId.val() != "" && stateId.val() != districtId.data("StateId")) {
                    $("#DistrictId_chzn > a > span").html("Please wait...");
                    districtId.data("StateId", stateId.val());
                    $.getJSON(districtId.data("source") + "?stateId=" + districtId.data("StateId"),
                        function (result) {
                            $.each(result, function () {
                                districtId.append($("<option />").val(this.Id).text(this.Name));
                            });
                            districtId.trigger("liszt:updated");
                        });
                }
            });
            schoolId.change(function () {
                if (districtId.val() != "" && districtId.val() != schoolId.data("DistrictId")) {
                    $("#SchoolId_chzn > a > span").html("Please wait...");
                    schoolId.data("DistrictId", districtId.val());
                    $.getJSON(schoolId.data("source") + "?districtId=" + schoolId.data("DistrictId"),
                        function (result) {
                            $.each(result, function () {
                                schoolId.append($("<option />").val(this.Id).text(this.Name));
                            });
                            schoolId.trigger("liszt:updated");
                        });
                }
            });
        });
    </script>
}
